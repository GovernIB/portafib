/*
 * API Interna de PortaFIB de consulta de serveis d'utilitat
 * Conjunt de Serveis REST de PortaFIB per atendre consultes generiques de Portafib
 *
 * The version of the OpenAPI document: 1.0-SNAPSHOT
 * Contact: otae@fundaciobit.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package es.caib.portafib.apiinterna.client.firma.v1.example.api;

import es.caib.portafib.apiinterna.client.firma.v1.api.UtilsV1Api;
import es.caib.portafib.apiinterna.client.firma.v1.model.AvailableLanguagesRest;
import es.caib.portafib.apiinterna.client.firma.v1.model.AvailableProfilesRest;
import es.caib.portafib.apiinterna.client.firma.v1.model.FirmaSimpleFile;
import es.caib.portafib.apiinterna.client.firma.v1.model.LlistaTipusDocumentalRest;
import es.caib.portafib.apiinterna.client.firma.v1.services.ApiClient;

import org.jboss.logging.Logger;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Properties;

/**
 * API tests for UtilsV1Api
 */
public class UtilsV1ApiTest {

    protected Logger log = Logger.getLogger(getClass());

    // private final UtilsV1Api api = new UtilsV1Api();

    public static void main(String[] args) {

        UtilsV1ApiTest utilsV1ApiTest = new UtilsV1ApiTest();
        try {

            utilsV1ApiTest.beforeMethod();

            utilsV1ApiTest.callTipusDocumentalListTest();

            utilsV1ApiTest.callPerfilsDeFirmaListTest();

            utilsV1ApiTest.callAvailableLanguagesTest();

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public void beforeMethod() throws Exception {
        getApi();
    }

    public void callTipusDocumentalListTest() throws Exception {

        String language = "ca";
        String appuser = "";
        String expectedError = null;
        // Comu

        internalTestTipusDocumentalList(language, appuser, expectedError);
    }

    public void callPerfilsDeFirmaListTest() throws Exception {

        String language = "ca";
        String expectedError = null;
        // Comu

        internalTestPerfilsDeFirmaList(language, expectedError);
    }

    public void callAvailableLanguagesTest() throws Exception {

        String language = "ca";
        String expectedError = null;

        // Comu
        internalTestAvailableLanguages(language, expectedError);
    }

    private AvailableLanguagesRest internalTestAvailableLanguages(String language, String expectedError)
            throws Exception {
        UtilsV1Api api;

        api = getApi();

        AvailableLanguagesRest response = api.getAvailableLanguages(language);
        if (expectedError != null) {
            log.error("internalTestAvailableLanguages: S'espera un error i la cridada ha funcionat.");
        }
        System.out.println(response.toString());
        return response;

    }

    private AvailableProfilesRest internalTestPerfilsDeFirmaList(String language, String expectedError)
            throws Exception {
        UtilsV1Api api;
        api = getApi();

        AvailableProfilesRest response = api.getAvailableProfiles1(language);
        if (expectedError != null) {
            log.error("internalTestPerfilsDeFirmaList: S'espera un error i la cridada ha funcionat.");
        }
        System.out.println(response.toString());
        return response;
    }

    private LlistaTipusDocumentalRest internalTestTipusDocumentalList(String language, String appuser,
            String expectedError) throws Exception {
        UtilsV1Api api;
            api = getApi();
        

            LlistaTipusDocumentalRest response = api.tipusdocumentalslist(language, appuser);
            if (expectedError != null) {
                log.error("internalTestTipusDocumentalList: S'espera un error i la cridada ha funcionat.");
            }
            System.out.println(response.toString());
            return response;
        
    }

    protected UtilsV1Api getApi() throws Exception {
        System.out.println("----------------- GET PROPERTIES");

        Properties prop = new Properties();
        File f = new File("apifirmautils.properties");
        if (!f.exists()) {
            System.out.println("----------------- PROPERTIES NOT FOUND");
            log.info("----------------- PROPERTIES NOT FOUND");
            return null;
        }
        prop.load(new FileInputStream(f));

        String basePath = prop.getProperty("basePath");
        String username = prop.getProperty("username");
        String password = prop.getProperty("password");

        System.out.println("----------------- GET basePath = " + basePath);
        System.out.println("----------------- GET username = " + username);
        System.out.println("----------------- GET password = " + password);

        ApiClient client = new ApiClient();
        client.setBasePath(basePath);
        client.setUsername(username);
        client.setPassword(password);

        UtilsV1Api api = new UtilsV1Api(client);
        return api;
    }
    
public static FirmaSimpleFile getSimpleFileFromResource(String fileName, String mime) throws Exception {
        
        InputStream is = new FileInputStream(new File(fileName));
        
        ByteArrayOutputStream fos = new ByteArrayOutputStream();
        copyFileToOutputStream(is, fos);

        FirmaSimpleFile asf = new FirmaSimpleFile();
        asf.setNom(fileName);
        asf.setMime(mime);
        ArrayList<byte[]> fosBytes = new ArrayList<byte[]>();
        fosBytes.add(fos.toByteArray());
        asf.setData(fosBytes.get(0));
        
        return asf;
    }

public static void copyFileToOutputStream(InputStream input, OutputStream output) throws IOException {
    byte[] buffer = new byte[4096];
    int n = 0;
    while (-1 != (n = input.read(buffer))) {
        output.write(buffer, 0, n);
    }
}

}
