/*
 * API Interna de PortaFIB de consulta de serveis d'utilitat
 * Conjunt de Serveis REST de PortaFIB per atendre consultes generiques de Portafib
 *
 * The version of the OpenAPI document: 1.0-SNAPSHOT
 * Contact: otae@fundaciobit.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package es.caib.portafib.apiinterna.client.firma.v1.api;

import es.caib.portafib.apiinterna.client.firma.v1.services.ApiClient;
import es.caib.portafib.apiinterna.client.firma.v1.services.ApiException;
import es.caib.portafib.apiinterna.client.firma.v1.model.ConstantsWs;
import es.caib.portafib.apiinterna.client.firma.v1.model.FirmaSimpleCommonInfo;
import es.caib.portafib.apiinterna.client.firma.v1.model.FirmaSimpleFile;
import es.caib.portafib.apiinterna.client.firma.v1.model.FirmaSimpleFileInfoSignature;
import es.caib.portafib.apiinterna.client.firma.v1.model.FirmaSimpleSignDocumentRequest;
import es.caib.portafib.apiinterna.client.firma.v1.model.FirmaSimpleSignatureRest;
import es.caib.portafib.apiinterna.client.firma.v1.model.FirmaSimpleStatus;


import org.junit.Test;


import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Properties;

/**
 * API tests for FirmaEnServidorV1Api
 */
public class FirmaEnServidorV1ApiTest extends ConstantsWs {
	
	public static final String PROFILE_PADES_PROPERTY = "PROFILE_PADES";

    public static final String PROFILE_XADES_PROPERTY = "PROFILE_XADES";

    public static final String PROFILE_CADES_PROPERTY = "PROFILE_CADES";

    public static final String PROFILE_MIX_PADES_XADES_CADES = "PROFILE_MIX_PADES_XADES_CADES";

	//private final FirmaEnServidorV1Api api = new FirmaEnServidorV1Api();

	/**
	 * Operacio de firma simple en servidor d&#39;un document
	 *
	 * @throws ApiException if the Api call fails
	 */
    
    public static void main(String[] args) {
    	FirmaEnServidorV1ApiTest test = new FirmaEnServidorV1ApiTest();
    	try {
			test.signdocumentTest();
		} catch (ApiException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
    
	@Test
	public void signdocumentTest() throws ApiException {

		FirmaEnServidorV1ApiTest firmaEnServidorV1ApiTest = new FirmaEnServidorV1ApiTest();
		
		try {

			firmaEnServidorV1ApiTest.testSignatureServerPAdES();

		} catch (NoAvailablePluginException nape) {

            nape.printStackTrace();

            System.err.println(
                    "No s'ha trobat cap plugin que pugui realitzar la firma o alguna de les firmes sol·licitades.");

        } catch (ApisIBClientException client) {

            client.printStackTrace();

            System.err.println(
                    "S'ha produït un error intentant contactar amb el servidor intermedi:" + client.getMessage());

        } catch (ApisIBServerException server) {

            server.printStackTrace();

            System.err.println("S'ha produït un error en el servidor intermedi:" + server.getMessage());

        } catch (Exception e) {
            e.printStackTrace();

            System.err.println("Error desconegut intentant realitzar les firmes: " + e.getMessage());
        }
		// TODO: test validations
	}
	
	
	@Test
    public void testSignatureServerPAdES() throws Exception, FileNotFoundException, IOException {

        Properties prop = getConfigProperties();

        FirmaEnServidorV1Api api = getApiFirmaEnServidorSimple(prop);

        final String perfil = prop.getProperty(PROFILE_PADES_PROPERTY);
        if (perfil == null) {
            logErrorPerfilBuit(PROFILE_PADES_PROPERTY);
        }

        FirmaSimpleFile fileToSign = getSimpleFileFromResource("test.pdf", "application/pdf");

        System.out.println(" PERFIL => " + perfil);
        System.out.println(" FILE NOM => " + fileToSign.getNom());
        internalSignDocument(api, perfil, fileToSign);
    }
	
	protected FirmaSimpleSignatureRest internalSignDocument(FirmaEnServidorV1Api api, final String perfil,
            FirmaSimpleFile fileToSign) throws Exception, FileNotFoundException, IOException {
        return internalSignDocument(api, perfil, fileToSign, null);
    }

    protected FirmaSimpleSignatureRest internalSignDocument(FirmaEnServidorV1Api api, final String perfil,
            FirmaSimpleFile fileToSign, String alias) throws Exception, FileNotFoundException, IOException {
        String signID = "1";
        String name = fileToSign.getNom();
        String reason = "Per aprovar pressuposts";
        String location = "Palma";

        int signNumber = 1;
        String languageSign = "ca";
        long tipusDocumentalID = 99; // =TD99

        FirmaSimpleFileInfoSignature fileInfoSignature = new FirmaSimpleFileInfoSignature();
        fileInfoSignature.setFileToSign(fileToSign);
        fileInfoSignature.setSignID(signID);
        fileInfoSignature.setName(name);
        fileInfoSignature.setReason(reason);
        fileInfoSignature.setLocation(location);
        fileInfoSignature.setSignNumber(signNumber);
        fileInfoSignature.setLanguageSign(languageSign);
        
        fileInfoSignature.setDocumentType(tipusDocumentalID);
        String languageUI = "ca";
        // Es la configuració del Servidor (deixam el valor per defecte)
        String username = alias; 
        String administrationID = null;
        String signerEmail = null;

        FirmaSimpleCommonInfo commonInfo = new FirmaSimpleCommonInfo();
        commonInfo.setSignProfile(perfil);
        commonInfo.setLanguageUI(languageUI);
        commonInfo.setUsername(username);
        commonInfo.setAdministrationID(administrationID);
        commonInfo.setSignerEmail(signerEmail);
        
        
        System.out.println("languageUI = |" + languageUI + "|");

        FirmaSimpleSignDocumentRequest signature = new FirmaSimpleSignDocumentRequest();
        
        signature.setCommonInfo(commonInfo);
        signature.setFileInfoSignature(fileInfoSignature);
        
        
        FirmaSimpleSignatureRest fullResults = api.signdocument(signature);

        FirmaSimpleStatus transactionStatus = fullResults.getStatus();

        int status = transactionStatus.getStatus();
        
        if(status == getSTATUSINITIALIZING()) {
        	System.err.println("Initializing ...Unknown Error (???)");
            return null;

        }else if(status == getSTATUSINPROGRESS()) {
        	System.err.println("In PROGRESS ... Unknown Error (????) ");
            return null;
        }else if(status == getSTATUSFINALERROR()) {

            System.err.println("Error durant la realització de les firmes: " + transactionStatus.getErrorMessage());
            String desc = transactionStatus.getErrorStackTrace();
            if (desc != null) {
                System.err.println(desc);
            }
            return null;
        	
        }else if(status == getSTATUSCANCELLED()) {
        	System.err.println("S'ha cancel·lat el procés de firmat.");
            return null;
        }else if(status == getSTATUSFINALOK()) {

            System.out.println(" ===== RESULTAT  =========");

            {
                System.out.println(" ---- Signature [ " + fullResults.getSignID() + " ]");

                System.err.println("  RESULT: OK");
                FirmaSimpleFile fsf = fullResults.getSignedFile();
                FileOutputStream fos = new FileOutputStream(fsf.getNom());
                fos.write(fsf.getData());
                fos.flush();
                fos.close();
                System.out.println("  RESULT: Fitxer signat guardat en '" + fsf.getNom() + "'");
                printSignatureInfo(fullResults);

                return fullResults;

            } // Final for de fitxers firmats
        }else {
        	return null;
        }// Final for de fitxers firmats
     // Final Case Firma OK
     // Final Switch Firma
     
    }
	
	
	
	
	protected static Properties getConfigProperties() throws IOException, FileNotFoundException {
        Properties prop = new Properties();

        prop.load(new FileInputStream(new File("./apifirmaenservidorsimple.properties")));
        return prop;
    }
	
	public static FirmaEnServidorV1Api getApiFirmaEnServidorSimple(Properties prop) throws Exception {

		FirmaEnServidorV1Api api;
        
        ApiClient client = new ApiClient();
        client.setBasePath(prop.getProperty("endpoint"));
        client.setUsername(prop.getProperty("username"));
        client.setPassword(prop.getProperty("password"));
        api = new FirmaEnServidorV1Api(client);

        return api;

    }
	
	protected void logErrorPerfilBuit(final String perfilProperty) {
        System.err.println("La propietat " + perfilProperty
                + " està buida. Això significa que si l'usuari aplicacio té més d'un perfil assignat, llavors llançarà un error.");
    }
	
	public static FirmaSimpleFile getSimpleFileFromResource(String fileName, String mime) throws Exception {
		
		File fileToSign = new File("./testfiles/" + fileName);
        InputStream is = new FileInputStream(new File("./testfiles/" + fileName));
        
        //
        //File tmp = File.createTempFile("testFile", fileName);
        //tmp.deleteOnExit();

        ByteArrayOutputStream fos = new ByteArrayOutputStream();
        copyFileToOutputStream(is, fos);

        FirmaSimpleFile asf = new FirmaSimpleFile();
        asf.setNom(fileName);
        asf.setMime(mime);
        ArrayList<byte[]> fosBytes = new ArrayList<byte[]>();
        fosBytes.add(fos.toByteArray());
        asf.setData(fosBytes.get(0));
        
        return asf;
    }
	
	public static void printSignatureInfo(FirmaSimpleSignatureRest fssr) {
        System.out.println(fssr.getSignedFileInfo().toString());
    }
	
	public static void copyFileToOutputStream(InputStream input, OutputStream output) throws IOException {
        byte[] buffer = new byte[4096];
        int n = 0;
        while (-1 != (n = input.read(buffer))) {
            output.write(buffer, 0, n);
        }
    }

}
